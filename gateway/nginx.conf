# /etc/nginx/nginx.conf
user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Docker DNS resolver 추가
    resolver 127.0.0.11 valid=30s;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;

    # Upstream definitions
    # 백엔드 API 서버만 upstream으로 설정
    upstream api_gateway {
        server gateway-app:8000;
        # 여러 인스턴스가 있는 경우 추가
        # server gateway-app-2:8000;
        # server gateway-app-3:8000;
        
        # 로드 밸런싱 설정
        # least_conn;  # 최소 연결 방식
        # ip_hash;     # IP 해시 방식
    }

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=chat_limit:10m rate=10r/m;    # 채팅: 분당 10회
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;     # 일반 API: 분당 60회
    limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=30r/m;   # 관리자 API: 분당 30회

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    server {
        listen 80;
        server_name localhost;
        
        # 기본 설정
        client_max_body_size 10M;
        client_body_timeout 60s;
        client_header_timeout 60s;
        keepalive_timeout 65s;
        
        # 압축 설정
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # 보안 헤더
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # CORS 설정
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        # # OPTIONS 요청 처리 (CORS preflight)
        # if ($request_method = 'OPTIONS') {
        #     add_header Access-Control-Allow-Origin "*";
        #     add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        #     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
        #     add_header Access-Control-Max-Age 1728000;
        #     add_header Content-Type "text/plain; charset=utf-8";
        #     add_header Content-Length 0;
        #     return 204;
        # }
        
        # 연결 제한
        limit_conn conn_limit 10;
        
        # 로그 설정
        access_log /var/log/nginx/api_gateway_access.log;
        error_log /var/log/nginx/api_gateway_error.log warn;
        
        # ==================== 루트 및 헬스체크 ====================
        
        location / {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 프록시 타임아웃
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        location /health {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://api_gateway/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 헬스체크는 짧은 타임아웃
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # 캐시 설정 (5초간 캐시)
            proxy_cache_valid 200 5s;
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # ==================== 채팅 API ====================
        
        location /api/chat {
            limit_req zone=chat_limit burst=5 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 채팅은 긴 타임아웃 (최대 2분)
            proxy_connect_timeout 5s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # 버퍼링 비활성화 (실시간 응답용)
            proxy_buffering off;
            proxy_cache off;
        }
        
        location /api/chat/stream {
            limit_req zone=chat_limit burst=3 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 스트리밍을 위한 설정
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            
            # 청크 인코딩 지원
            chunked_transfer_encoding on;
            
            # 스트리밍 헤더
            add_header Cache-Control "no-cache";
            add_header Connection "keep-alive";
        }
        
        # ==================== WebSocket ====================
        
        location /ws/ {
            limit_req zone=chat_limit burst=3 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            
            # WebSocket 헤더
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 타임아웃 (긴 연결용)
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # 버퍼링 비활성화
            proxy_buffering off;
            proxy_cache off;
        }
        
        # ==================== 관리자 API ====================
        
        location /api/admin/ {
            limit_req zone=admin_limit burst=10 nodelay;
            
            # IP 화이트리스트 (필요시 활성화)
            # allow 192.168.1.0/24;
            # allow 10.0.0.0/8;
            # deny all;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 관리자 API 타임아웃
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # ==================== 일반 API ====================
        
        location /api/ {
            limit_req zone=api_limit burst=15 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 일반 API 타임아웃
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # ==================== 정적 파일 (필요시) ====================
        
        location /static/ {
            alias /var/www/static/;
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # 정적 파일 압축
            gzip_static on;
        }
        
        # ==================== 보안 및 차단 ====================
        
        # 숨겨진 파일 차단
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 백업 파일 등 차단
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # robots.txt
        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /api/admin/\n";
        }
        
        # favicon.ico
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1d;
            add_header Cache-Control "public, immutable";
            return 204;
        }
        
        # ==================== 에러 페이지 ====================
        
        error_page 404 /404.html;
        error_page 429 /429.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            add_header Content-Type "application/json";
            return 404 '{"error": "Not Found", "message": "The requested resource was not found", "status": 404}';
        }
        
        location = /429.html {
            internal;
            add_header Content-Type "application/json";
            return 429 '{"error": "Too Many Requests", "message": "Rate limit exceeded. Please try again later", "status": 429}';
        }
        
        location = /50x.html {
            internal;
            add_header Content-Type "application/json";
            return 500 '{"error": "Internal Server Error", "message": "Something went wrong on our end", "status": 500}';
        }
    }

    # Optional HTTPS configuration
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     
    #     ssl_certificate /etc/ssl/certs/nginx.crt;
    #     ssl_certificate_key /etc/ssl/private/nginx.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Include all the same location blocks as above
    # }
}
